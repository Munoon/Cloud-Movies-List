schema {
    query: Query,
    mutation: Mutation
}

scalar LocalDate
scalar LocalDateTime

type Movie {
    id: ID!,
    name: String!,
    originalName: String,
    hasAvatar: Boolean!
    about: String,
    country: String!,
    genres: [String]!,
    premiere: LocalDate!,
    age: String!,
    time: String!,
    registered: LocalDateTime!
}

input CreateMovie {
    name: String!,
    originalName: String,
    avatarImageId: String,
    about: String,
    country: String!,
    genres: [String]!,
    premiere: LocalDate!,
    age: String,
    time: String
}

type PagedMovie {
    totalPages: Int!,
    totalElements: Int!,
    movies: [Movie]!
}

type Query {
    movie(id: ID): Movie
    latestMovies(count: Int, page: Int): PagedMovie
    findMovies(findQuery: String, count: Int, page: Int): PagedMovie
}

type Mutation {
    addMovie(newMovie: CreateMovie!): Movie
}